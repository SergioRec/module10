---
title: "Effect of the Ukraine invasion on the prices of gas"
format:
    html:
        embed-resources: true
        echo: false
---

### Introduction

In this project we're going to test the hypothesis that the Russian invasion
of Ukraine, started end of February 2022, had a significant impact in energy
prices. This increase in energy prices would have a knock-on effect on
industries considered high energy intensive, but less so in industries with
less dependency on energy prices.

To assess this hipothesis, we are going to use a technique called synthetic
control, first developed by [Abadie et al.](https://www.jstor.org/stable/29747059)
in 2010.

```{python}
# imports
import os
import warnings

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from pyprojroot import here

# ignore future warnings
warnings.simplefilter(action="ignore", category=FutureWarning)
```



```{python}
# load data files

## CPI tables: https://www.ons.gov.uk/economy/inflationandpriceindices/datasets/consumerpriceinflation  # noqa
cpi = pd.read_excel(
    os.path.join(
        here(),
        "data",
        "external",
        "consumerpriceinflationdetailedreferencetables.xlsx",
    ),
    skiprows=[0, 1, 2, 3, 5, 6],
    skipfooter=11,
    usecols="A:DT",
    sheet_name="Table 57",
    na_values="..",
)

## Energy intensity: https://www.ons.gov.uk/economy/inflationandpriceindices/datasets/contributionstotheconsumerpricesindexcpibyenergyintensity  # noqa
ei = pd.read_excel(
    os.path.join(here(), "data", "external", "cddataset.xlsx"), skiprows=2
)

ei[["coicop_code", "item_name"]] = ei["COICOP Class level item"].str.split(
    " : ", expand=True
)
ei = ei.drop("COICOP Class level item", axis=1)
ei = ei.rename(
    columns={
        "Energy Intensity": "energy_intensity",
        "Energy Intensity Group": "energy_intensity_group",
    }
)

cpi = cpi.rename(columns={"Unnamed: 0": "date"}).drop(
    columns="aggregate number"
)
cpi_melted = cpi.melt(id_vars="date", var_name="coicop_code", value_name="cpi")
cpi_melted["coicop_code"] = cpi_melted["coicop_code"].astype("str")

# merged data
data = cpi_melted.merge(ei, on="coicop_code", how="inner").copy()

data.head(10)
```

@fig-1 shows clearly that energy prices increased drastically after the
invasion started. This increase overshadows any change in trends in any of the
other categories.
```{python}
#| label: fig-1
#| fig-cap: "A plot showing trend in CPI by energy intensity group"
ons_cat = ["#12436D", "#28A197", "#801650", "#F46A25", "#3D3D3D", "#A285D1"]
sns.set_palette(sns.color_palette(ons_cat))

# plot coicop categories from 2015 onwards to see trends

data_plot = data[(data["date"] >= 201501)].copy()

# convert date string to integer from 1 to max
# needed as intervals between date strings might not be the same
data_plot["rank"] = data_plot["date"].rank(method="dense")
rank_treatment = data_plot[data_plot["date"] == 202202]["rank"].unique()[0]

fig, ax = plt.subplots()
sns.lineplot(
    data=data_plot,
    x="rank",
    y="cpi",
    hue="energy_intensity_group",
    ci=False,
    ax=ax
)
plt.vlines(
    x=rank_treatment,
    ymin=ax.get_ylim()[0],
    ymax=ax.get_ylim()[1],
    linestyles=":",
    colors="black",
)
ax.grid(axis="y", color="lightgrey", linewidth=1)
sns.despine(top=True, right=True, left=True, bottom=True)
plt.show()
```

@fig-2 shows the same information as above, but without the energy category
to better appreciate the trends. It seems that industry groups with high and
very high energy intensity grow faster after the war started. However, it is
difficult to be sure because trends were not parallel before.
```{python}
#| label: fig-2
#| fig-cap: "Trend in CPI by energy intensity group, excluding energy"

# same but without energy
fig, ax = plt.subplots()
sns.lineplot(
    data=data_plot[data_plot["energy_intensity_group"] != "Energy"],
    x="rank",
    y="cpi",
    hue="energy_intensity_group",
    ci=False,
    ax=ax,
)
plt.vlines(
    x=rank_treatment,
    ymin=ax.get_ylim()[0],
    ymax=ax.get_ylim()[1],
    linestyles=":",
    colors="black",
)
ax.grid(axis="y", color="lightgrey", linewidth=1)
sns.despine(top=True, right=True, left=True, bottom=True)
plt.show()
```
